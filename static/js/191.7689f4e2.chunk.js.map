{"version":3,"file":"static/js/191.7689f4e2.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/split-e6a60a09.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-6292d8c3.esm.js';\nimport { cn as ContractWrapper, ah as ContractMetadata, cI as SplitsContractSchema, ai as ContractRoles, ag as ContractEncoder, aR as GasCostEstimator, aS as ContractEvents, aT as ContractInterceptor, cJ as fetchCurrencyValue } from './paper-xyz-f6b19dee.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getSplit(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n\nclass Split {\n  /**\n   * @internal\n   */\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, abi, options);\n\n    _defineProperty(this, \"contractWrapper\", void 0);\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"roles\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n\n\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.readContract.payeeCount();\n\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(index);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n\n\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n\n    return balances;\n  }\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n\n\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, tokenAddress);\n    }\n\n    return balances;\n  }\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n\n\n  async balanceOf(address) {\n    const walletBalance = await this.contractWrapper.readContract.provider.getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(address, totalReceived, await this.contractWrapper.readContract[\"released(address)\"](address));\n  }\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n\n\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased(address)\"](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(walletAddress, totalReceived, await this.contractWrapper.readContract[\"released(address,address)\"](tokenAddress, walletAddress));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, value);\n  }\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n\n\n  async getRecipientSplitPercentage(address) {\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(address)]); // We convert to basis points to avoid floating point loss of precision\n\n    return {\n      address,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n\n\n  async withdraw(walletAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [walletAddress])\n    };\n  }\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n\n\n  async withdrawToken(walletAddress, tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address,address)\", [tokenAddress, walletAddress])\n    };\n  }\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n\n\n  async distribute() {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", [])\n    };\n  }\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n\n\n  async distributeToken(tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute(address)\", [tokenAddress])\n    };\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.readContract.shares(address));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.readContract.totalShares());\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n}\n\n_defineProperty(Split, \"contractRoles\", [\"admin\"]);\n\nexport { Split };\n"],"names":["Split","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","ContractWrapper","_defineProperty","this","metadata","ContractMetadata","SplitsContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","updateSignerOrProvider","readContract","recipients","index","BigNumber","payeeCount","totalRecipients","lt","payee","recipientAddress","getRecipientSplitPercentage","push","add","toLowerCase","includes","getAllRecipients","balances","recipient","balanceOf","tokenAddress","balanceOfToken","provider","getBalance","getAddress","walletBalance","totalReleased","totalReceived","_pendingPayment","walletAddress","erc20","Contract","ERC20Abi","getProvider","value","fetchCurrencyValue","Promise","all","totalShares","shares","walletsShares","splitPercentage","mul","div","toNumber","sendTransaction","receipt","alreadyReleased","addressReceived","totalRoyaltyAvailable","sub","functionName","_len","args","Array","_key","call"],"sourceRoot":""}