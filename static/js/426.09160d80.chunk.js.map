{"version":3,"file":"static/js/426.09160d80.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-drop-1a2b14f6.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-6292d8c3.esm.js';\nimport { av as StandardErc20, cn as ContractWrapper, ah as ContractMetadata, cK as DropErc20ContractSchema, ai as ContractRoles, ag as ContractEncoder, aR as GasCostEstimator, aS as ContractEvents, ak as ContractPrimarySale, aU as ContractPlatformFee, aT as ContractInterceptor, am as DropClaimConditions, bt as getRoleHash } from './paper-xyz-f6b19dee.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getTokenDrop(\"{{contract_address}}\");\n * ```\n *\n */\n\nclass TokenDrop extends StandardErc20 {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage);\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"roles\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"sales\", void 0);\n\n    _defineProperty(this, \"platformFees\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"claimConditions\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n\n\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n\n\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n\n\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n\n\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n\n\n  async claim(amount) {\n    let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n  }\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n\n\n  async claimTo(destinationAddress, amount) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc20.claimTo(destinationAddress, amount, checkERC20Allowance);\n  }\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n\n\n  async delegateTo(delegateeAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [delegateeAddress])\n    };\n  }\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n\n\n  async burnTokens(amount) {\n    return this.erc20.burn(amount);\n  }\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n\n\n  async burnFrom(holder, amount) {\n    return this.erc20.burnFrom(holder, amount);\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n}\n\n_defineProperty(TokenDrop, \"contractRoles\", [\"admin\", \"transfer\"]);\n\nexport { TokenDrop };\n"],"names":["TokenDrop","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","ContractWrapper","_defineProperty","metadata","ContractMetadata","DropErc20ContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","sales","ContractPrimarySale","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","claimConditions","DropClaimConditions","this","getSignerAddress","getVoteBalanceOf","account","erc20","readContract","getVotes","getValue","getDelegationOf","delegates","hasRole","getRoleHash","constants","anyoneCanTransfer","amount","checkERC20Allowance","claimTo","destinationAddress","delegateeAddress","sendTransaction","receipt","burn","holder","burnFrom","functionName","_len","args","Array","_key","call","StandardErc20"],"sourceRoot":""}