{"version":3,"file":"static/js/931.eba7399b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/nft-drop-98ca694c.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-6292d8c3.esm.js';\nimport { aF as StandardErc721, cn as ContractWrapper, ah as ContractMetadata, cz as DropErc721ContractSchema, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, am as DropClaimConditions, ag as ContractEncoder, aR as GasCostEstimator, aS as ContractEvents, aU as ContractPlatformFee, aw as Erc721, al as DelayedReveal, cA as FEATURE_NFT_REVEALABLE, aT as ContractInterceptor, aW as ContractOwner, cm as PaperCheckout, a_ as DEFAULT_QUERY_ALL_COUNT, bt as getRoleHash, cB as uploadOrExtractURIs, cC as prepareClaim } from './paper-xyz-f6b19dee.esm.js';\nimport { BigNumber, constants, ethers } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getNFTDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n\nclass NFTDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage);\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"sales\", void 0);\n\n    _defineProperty(this, \"platformFees\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"roles\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    _defineProperty(this, \"royalties\", void 0);\n\n    _defineProperty(this, \"claimConditions\", void 0);\n\n    _defineProperty(this, \"revealer\", void 0);\n\n    _defineProperty(this, \"checkout\", void 0);\n\n    _defineProperty(this, \"erc721\", void 0);\n\n    _defineProperty(this, \"owner\", void 0);\n\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n  /**\n   * @internal\n   */\n\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n\n\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n\n\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n\n\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n\n\n  async totalClaimedSupply() {\n    return await this.contractWrapper.readContract.nextTokenIdToClaim();\n  }\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n\n\n  async totalUnclaimedSupply() {\n    return (await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply());\n  }\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n\n\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n\n\n  async createBatch(metadatas, options) {\n    const startFileNumber = await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options); // ensure baseUri is the same for the entire batch\n\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n\n      if (baseUri !== uri) {\n        throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n      }\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, ethers.utils.toUtf8Bytes(\"\")]);\n    const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.getTokenMetadata(id)\n      });\n    }\n\n    return results;\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n\n\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n\n\n  async claimTo(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.claimTo(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n\n\n  async claim(quantity) {\n    let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n  }\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n\n\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n\n\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n\n\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n\n\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n\n\n  async balance() {\n    return this.erc721.balance();\n  }\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n\n\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n\n\n  async transfer(to, tokenId) {\n    return this.erc721.transfer(to, tokenId);\n  }\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n\n\n  async setApprovalForAll(operator, approved) {\n    return this.erc721.setApprovalForAll(operator, approved);\n  }\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n\n\n  async setApprovalForToken(operator, tokenId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [operator, tokenId])\n    };\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n\n\n  async prepareClaim(quantity, checkERC20Allowance) {\n    return prepareClaim(quantity, await this.claimConditions.getActive(), async () => (await this.metadata.get()).merkle, 0, this.contractWrapper, this.storage, checkERC20Allowance);\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n}\n\n_defineProperty(NFTDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTDrop };\n"],"names":["NFTDrop","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","ContractWrapper","_defineProperty","metadata","ContractMetadata","DropErc721ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropClaimConditions","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","erc721","Erc721","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","nextTokenIdToMint","interceptor","ContractInterceptor","owner","ContractOwner","checkout","PaperCheckout","this","updateSignerOrProvider","readContract","totalClaimedSupply","claimed","totalUnclaimedSupply","unclaimed","add","queryParams","start","BigNumber","toNumber","count","DEFAULT_QUERY_ALL_COUNT","Math","nextTokenIdToClaim","maxId","min","Promise","all","Array","from","keys","map","i","get","toString","max","firstTokenId","sub","getTokenMetadata","hasRole","getRoleHash","constants","anyoneCanTransfer","metadatas","startFileNumber","uploadOrExtractURIs","batch","baseUri","substring","lastIndexOf","uri","Error","sendTransaction","endsWith","ethers","receipt","event","parseLogs","logs","startingIndex","args","startTokenId","endingIndex","endTokenId","results","id","push","data","lte","destinationAddress","quantity","checkERC20Allowance","getClaimTransaction","claimTo","getSignerAddress","tokenId","burn","ownerOf","balanceOf","balance","operator","isApproved","to","transfer","approved","setApprovalForAll","prepareClaim","getActive","merkle","functionName","_len","_key","call","StandardErc721"],"sourceRoot":""}